# This is a stand alone script for setting up the server
# This server will use pymysql and MySQL

import pymysql
from os import system
from getpass import getpass
from PasswordGenerator import GeneratePassword


def install_required_packages():
    print("############## - Installing Required Packages - ##############")
    print("Running 'pip3 install -r requirements.txt' to install required packages")
    exit_code = system("pip3 install -r requirements.txt")

    if exit_code != 0:
        print("Some error occurred while installing required packages!")

    print()
    return exit_code


def configure_mysql_db():
    print()
    print("############## - Establishing connection with MySQL - ##############")
    db_host = input("Input MySQL database host: ")
    root_username = input("Input MySQL root username: ")
    exit_if_empty(root_username)
    root_password = getpass("Input MySQL root password: ")
    exit_if_empty(root_password)

    try:
        db = pymysql.connect(
            host=db_host,
            user=root_username,
            password=root_password
        )
        db_cursor = db.cursor()
        print("MySQL connection established successfully!")

    except Exception as e:
        print()
        print("Following error occurred while connecting to MySQL:")
        print(e)
        print("Exiting!")
        exit()

    print()

    print("############## - Creating new MySQL user - ##############")
    db_username = input("Input username for new MySQL user: ")
    exit_if_empty(db_username)

    db_password = getpass("Input password for new MySQL user: ")
    exit_if_empty(db_password)

    print(f"Dropping the user '{db_username}' if it already exists!")

    try:
        db_cursor.execute(f"DROP USER IF EXISTS '{db_username}'@'localhost';")
        print(f"Creating new MySQL user '{db_username}'!")
        db_cursor.execute(
            "CREATE USER %s@'localhost' IDENTIFIED BY %s", (db_username, db_password))
        print()

        print("############## - Creating new MySQL database - ##############")

        db_name = input("Input new MySQL database: ")
        exit_if_empty(db_name)

        print(f"Dropping the database '{db_name}' if it already exists!")
        db_cursor.execute(f"DROP DATABASE IF EXISTS {db_name};")
        print(f"Creating new MySQL datbase '{db_name}'!")
        db_cursor.execute(f"CREATE DATABASE {db_name}")
        print()

        print("############## - Granting Privileges - ##############")
        print(
            f"Granting all privileges to user '{db_username}' on database '{db_name}'")
        db_cursor.execute(
            f"GRANT ALL PRIVILEGES ON {db_name}.* TO '{db_username}'@'localhost'")
        print("Flushing privileges!")
        db_cursor.execute("FLUSH PRIVILEGES;")

        print()

        return (db_host, db_username, db_password, db_name)

    except Exception as e:
        print()
        print("Following error occurred while executing MySQL queries:")
        print(e)
        print("Exiting!")
        exit()


def configure_mail_settings():
    print("############## - Configuring Mail Settings - ##############")

    mail_server = input("Mail Server: ")
    exit_if_empty(mail_server)

    mail_port = input("Mail Port: ")
    exit_if_empty(mail_port)

    mail_use_ssl = input("Mail Use SSL? [Y / N]: ").lower() != "n"

    mail_username = input("Mail Username: ")
    exit_if_empty(mail_username)

    mail_password = getpass("Mail Password: ")
    exit_if_empty(mail_password)

    print()

    return (mail_server, mail_port, mail_use_ssl, mail_username, mail_password)


def manage_general_settings():
    secret_key = public_website_url = None
    if input("Would you like to generate a secret key for the app? [Y / N]: ").lower() != "n":
        secret_key = GeneratePassword(64, True, True, True, False)

    public_website_url = input("Input public website url: ")
    exit_if_empty(public_website_url)

    print()

    return (secret_key, public_website_url)


def exit_if_empty(s: str):
    if s.strip() == "":
        print("Value cannot be empty!")
        print("Exiting!")
        exit()


def create_env_file(overwrite: bool, general_settings=None, db_settings=None, mail_settings=None):
    print("############## - Managing .env file - ##############")
    if not general_settings and not db_settings and not mail_settings:
        print("Why you wasting my precious time?")
        print("Exiting!")
        exit()

    try:
        print("Opening .env file for editing!")
        env_file = open(".env", mode='w' if overwrite else 'a')
        print("")
        env_file.write(
            "#Settings automatically generated by script. Tweak as necessary\n")

        if general_settings:
            print("Adding general settings to the file!")
            env_file.write("#General\n")
            env_file.write(f"SECRET_KEY={general_settings[0]}\n")
            env_file.write(
                f"PUBLIC_WEBSITE_URL={general_settings[1]}\n")
            print("Successfully added general settings to the file!")

        if db_settings:
            print("Adding database settings to the file!")
            env_file.write("#Database\n")
            DATABASE_URI = f"mysql+pymysql://{db_settings[1]}:{db_settings[2]}@{db_settings[0]}/{db_settings[3]}"
            env_file.write(f"DATABASE_URI={DATABASE_URI}\n")
            print("Successfully added databse settings to the file!")

        if mail_settings:
            print("Adding mail settings to the file!")
            env_file.write("#Mail Server\n")
            env_file.write(f"MAIL_SERVER={mail_settings[0]}\n")
            env_file.write(f"MAIL_PORT={mail_settings[1]}\n")
            env_file.write(
                f"MAIL_USE_SSL={1 if mail_settings[2] == True else 0}\n")
            env_file.write(f"MAIL_USERNAME={mail_settings[3]}\n")
            env_file.write(f"MAIL_PASSWORD={mail_settings[4]}\n")
            print("Sucessfully added mail settings to the file!")

        print(".env file successfully creating and modifed!")

    except Exception as e:
        print("The following error occurred while creating/writing to .env file: ")
        print(e)
        print("Exiting!")
        exit()


if __name__ == "__main__":
    general_settings = db_settings = mail_settings = None

    if input("Install the required packages? [Y / N]: ").lower() != "n":
        install_required_packages()

    if input("Set up general settings? [Y / N]: ").lower() != "n":
        general_settings = manage_general_settings()

    if input("Set up MySQL Database? [Y / N]: ").lower() != "n":
        db_settings = configure_mysql_db()

    if input("Set up mail server settings? [Y / N]: ").lower() != "n":
        mail_settings = configure_mail_settings()

    if input("Write to .env file? [Y / N]: ").lower() != "n":
        overwrite = input(
            "Overwrite any existing .env file? [Y / N]: ").lower() == "y"

        create_env_file(overwrite, general_settings,
                        db_settings, mail_settings)

    print("\n" + '\033[92m' + "Server successfully set up!" + '\033[0m')


"""
Objectives

- Ask for settings for MAIL SMTP (Optional) (Done)
- Fill out fields for .env file using input from the user
    - Create an empty string variable which contains the supposed contents of the .env file
    - Add to that .env file content variable on every step
    - If everything goes well, overwrite any existing .env file and write the contents to it.

"""
