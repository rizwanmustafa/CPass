#!/usr/bin/env python3
# This is a stand alone script for setting up the server
# This server will use pymysql and MySQL

import pymysql
from os import system
from getpass import getpass
from password_generator import generate_password


def install_required_packages():
    print("############## - Installing Required Packages - ##############")
    print("Running 'pip3 install -r requirements.txt' to install required packages")
    exit_code = system("pip3 install -r requirements.txt")

    if exit_code != 0:
        print("Some error occurred while installing required packages!")

    print()
    return exit_code


def configure_mysql_db(settings: dict):
    print()
    print("############## - Establishing connection with MySQL - ##############")
    db_host = input("Input MySQL database host: ")
    root_username = input("Input MySQL root username: ")
    exit_if_empty(root_username)
    root_password = getpass("Input MySQL root password: ")
    exit_if_empty(root_password)

    try:
        db = pymysql.connect(
            host=db_host,
            user=root_username,
            password=root_password
        )
        db_cursor = db.cursor()
        print("MySQL connection established successfully!")

    except Exception as e:
        print()
        print("Following error occurred while connecting to MySQL:")
        print(e)
        print("Exiting!")
        exit()

    print()

    print("############## - Creating new MySQL user - ##############")
    db_username = input("Input username for new MySQL user: ")
    exit_if_empty(db_username)

    db_password = getpass("Input password for new MySQL user: ")
    exit_if_empty(db_password)

    print(f"Dropping the user '{db_username}' if it already exists!")

    try:
        db_cursor.execute(f"DROP USER IF EXISTS '{db_username}'@'localhost';")
        print(f"Creating new MySQL user '{db_username}'!")
        db_cursor.execute(
            "CREATE USER %s@'localhost' IDENTIFIED BY %s", (db_username, db_password))
        print()

        print("############## - Creating new MySQL database - ##############")

        db_name = input("Input new MySQL database: ")
        exit_if_empty(db_name)

        print(f"Dropping the database '{db_name}' if it already exists!")
        db_cursor.execute(f"DROP DATABASE IF EXISTS {db_name};")
        print(f"Creating new MySQL datbase '{db_name}'!")
        db_cursor.execute(f"CREATE DATABASE {db_name}")
        print()

        print("############## - Granting Privileges - ##############")
        print(
            f"Granting all privileges to user '{db_username}' on database '{db_name}'")
        db_cursor.execute(
            f"GRANT ALL PRIVILEGES ON {db_name}.* TO '{db_username}'@'localhost'")
        print("Flushing privileges!")
        db_cursor.execute("FLUSH PRIVILEGES;")

        print()
        settings["DATABASE_URI"] = f"mysql+pymysql://{db_username}:{db_password}@{db_host}/{db_name}"

    except Exception as e:
        print()
        print("Following error occurred while executing MySQL queries:")
        print(e)
        print("Exiting!")
        exit()


def configure_mail_settings(settings: dict):
    print("############## - Configuring Mail Settings - ##############")

    mail_server = input("Mail Server: ")
    exit_if_empty(mail_server)

    mail_port = input("Mail Port: ")
    exit_if_empty(mail_port)

    mail_use_ssl = input("Mail Use SSL? [Y / N]: ").lower() != "n"

    mail_username = input("Mail Username: ")
    exit_if_empty(mail_username)

    mail_password = getpass("Mail Password: ")
    exit_if_empty(mail_password)

    print()

    settings["MAIL_SERVER"] = mail_server
    settings["MAIL_PORT"] = mail_port
    settings["MAIL_USE_SSL"] = mail_use_ssl
    settings["MAIL_USERNAME"] = mail_username
    settings["MAIL_PASSWORD"] = mail_password


def manage_general_settings(settings: dict):
    public_website_url = None
    if input("Would you like to generate a secret key for the app? [Y / N]: ").lower() != "n":
        settings["SECRET_KEY"] = generate_password(64, True, True, True, False)

    public_website_url = input("Input public website url: ")
    settings["PUBLIC_WEBSITE_URL"] = public_website_url
    exit_if_empty(public_website_url)

    print()


def exit_if_empty(s: str):
    if s.strip() == "":
        print("Value cannot be empty!")
        print("Exiting!")
        exit()


def create_env_file(overwrite: bool):
    print()
    print("############## - Managing .env file - ##############")
    try:
        print("Opening .env file for editing!")
        env_file = open(".env", mode='w' if overwrite else 'a')
        print("Writing to .env file")

        env_file.write("# File generated by script. Tweak as necessary\n")

        for key in settings:
            env_file.write(f'{key}="{settings[key]}"\n')

        print("Done writing to .env file!")

    except Exception as e:
        print("The following error occurred while creating/writing to .env file: ")
        print(e)
        print("Exiting!")
        exit()


if __name__ == "__main__":
    settings: dict = dict()
    general_settings = db_settings = mail_settings = None

    if input("Install the required packages? [Y / N]: ").lower() != "n":
        install_required_packages()

    if input("Set up general settings? [Y / N]: ").lower() != "n":
        manage_general_settings(settings)

    if input("Set up MySQL Database? [Y / N]: ").lower() != "n":
        configure_mysql_db(settings)

    if input("Set up mail server settings? [Y / N]: ").lower() != "n":
        configure_mail_settings(settings)

    if input("Write to .env file? [Y / N]: ").lower() != "n":
        overwrite = input(
            "Overwrite any existing .env file? [Y / N]: ").lower() == "y"

        create_env_file(settings)

    print("\n" + '\033[92m' + "Server successfully set up!" + '\033[0m')
